using OneWare.Shared.Models;
using OneWare.Shared.Services;
using Prism.Ioc;

namespace OneWare.Vhdl
{
    public class TomlCreator
    {
        public static void RefreshToml(IProjectRoot project)
        {
            CreateToml(project);
        }

        private static bool IsVhdl(IProjectFile file)
        {
            return file.Extension.Equals(".vhd", StringComparison.OrdinalIgnoreCase)
                   || file.Extension.Equals(".vhdl", StringComparison.OrdinalIgnoreCase);
        }
        private static void CreateToml(IProjectRoot project)
        {
            try
            {
                var vhdls = project.Files.Where(IsVhdl).ToList();

                var workFiles = "[Libraries]\nwork.files = [\n";
                var files = "[libraries.work]\nfiles = [\n";

                var vhdlString = "";
                var autoGenerated = "";

                if (project.Items.FirstOrDefault(x => x.Header == "Generated") is IProjectFolder generatedFolder)
                    foreach (var i in generatedFolder.Items)
                        if (i is IProjectFile file && IsVhdl(file))
                            vhdls.Add(file);

                foreach (var vhdl in vhdls)
                {
                    if (vhdl is ExternalFile) //TODO shared
                    {
                        vhdlString += "\t'" + vhdl.RelativePath.Replace('\\', '/') + "'";
                    }
                    else
                    {
                        var relativePath = Path.GetRelativePath(project.RootFolderPath,
                            vhdl.FullPath);
                        vhdlString += "\t'" + relativePath.Replace('\\', '/') + "'";
                    }

                    if (vhdl != vhdls.Last()) vhdlString += ',';
                    vhdlString += "\n";
                }

                vhdlString += "]";

                autoGenerated = $"# auto-generated\n{workFiles}{vhdlString}\n{files}{vhdlString}\n# auto-generated-end";

                var tomlPath = Path.Combine(project.RootFolderPath, "vhdl_ls.toml");
                if (File.Exists(tomlPath))
                {
                    var existingToml = File.ReadAllText(tomlPath);
                    var start = existingToml.IndexOf("# auto-generated", StringComparison.OrdinalIgnoreCase);
                    var end = start >= 0
                        ? existingToml.IndexOf("# auto-generated-end", start, StringComparison.Ordinal)
                        : -1;
                    if (start != -1 && end > start)
                    {
                        existingToml = existingToml.Remove(start, end - start + "# auto-generated-end".Length);
                        existingToml = existingToml.Insert(start, autoGenerated);
                        File.WriteAllText(tomlPath, existingToml);
                        return;
                    }

                    existingToml = existingToml.Insert(0, "\n" + autoGenerated);
                    File.WriteAllText(tomlPath, existingToml);
                    return;
                }

                File.WriteAllText(tomlPath, autoGenerated);
            }
            catch (Exception e)
            {
                ContainerLocator.Container.Resolve<ILogger>()?.Error(e.Message, e);
            }
        }
    }
}